// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(uuid())
  fullName          String
  imageUrl          String?
  email             String        @unique
  password          String?
  googleId          String?       @unique
  phone             String?
  address           String?
  education         Education[]
  designation       String?
  research          Research[]
  articles          Article[]
  certificateCourse String[]      @db.Text
  workshop          String[]      @db.Text
  conferenceHours   Int?
  achievements      Achievement[]
  electives         String?
  yoe               Int?
  experience        Experience[]
  connections       User[]        @relation("UserConnections")
  connectedTo       User[]        @relation("UserConnections")
  socialLinks       SocialLink?
  organization      Boolean?
  jobsPosted        jobs[]         @relation("PostedJobs")
  appliedJobs       jobs[]         @relation("AppliedJobs")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model jobs {
  id                Int      @id @default(autoincrement())
  slug              String   @unique
  title             String
  type              String
  locationType      String
  location          String?
  description       String?
  salary            Int
  companyName       String
  applicationEmail  String?
  applicationUrl    String?
  companyLogoUrl    String?
  experience        String?
  approved          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  appliedBy         User[]   @relation("AppliedJobs")
  postedBy          User?    @relation("PostedJobs", fields: [postedById], references: [id])
  postedById        String?
}

model Education {
  id            String    @id @default(uuid())
  degree        String
  fieldOfStudy  String
  institution   String
  startDate     DateTime
  endDate       DateTime?
  userId        String
  user          User      @relation(fields: [userId], references: [id])
}

model Experience {
  id            String    @id @default(uuid())
  position      String
  institution   String
  startDate     DateTime
  endDate       DateTime?
  description   String?
  userId        String
  user          User      @relation(fields: [userId], references: [id])
}

model Research {
  id            String   @id @default(uuid())
  title         String
  description   String
  userId        String
  link          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model Article {
  id          String   @id @default(uuid())
  title       String
  content     String
  images      String[]
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Achievement {
  id          String @id @default(uuid())
  title       String
  description String
  userId      String
  user        User   @relation(fields: [userId], references: [id])
}

model SocialLink {
  id            String  @id @default(uuid())
  twitter       String?
  instagram     String?
  researchGate  String?
  linkedin      String?
  userId        String  @unique
  user          User    @relation(fields: [userId], references: [id])
}